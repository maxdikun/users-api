// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package gen

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const insertUser = `-- name: InsertUser :exec
INSERT INTO users(
    id, username, email, password,
    email_confirmed_at, created_at, updated_at, is_deleted
) VALUES(
    $1, $2, $3, $4, $5,
    $6, $7, $8
)
`

type InsertUserParams struct {
	ID               uuid.UUID
	Username         string
	Email            string
	Password         string
	EmailConfirmedAt *time.Time
	CreatedAt        time.Time
	UpdatedAt        time.Time
	IsDeleted        bool
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) error {
	_, err := q.db.Exec(ctx, insertUser,
		arg.ID,
		arg.Username,
		arg.Email,
		arg.Password,
		arg.EmailConfirmedAt,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.IsDeleted,
	)
	return err
}

const selectUserByEmail = `-- name: SelectUserByEmail :one
SELECT id, username, email, password, email_confirmed_at, created_at, updated_at, is_deleted
FROM users
WHERE email = $1
`

func (q *Queries) SelectUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, selectUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.EmailConfirmedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
	)
	return i, err
}

const selectUserById = `-- name: SelectUserById :one
SELECT id, username, email, password, email_confirmed_at, created_at, updated_at, is_deleted
FROM users
WHERE id = $1
`

func (q *Queries) SelectUserById(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, selectUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.EmailConfirmedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
	)
	return i, err
}

const selectUserByUsername = `-- name: SelectUserByUsername :one
SELECT id, username, email, password, email_confirmed_at, created_at, updated_at, is_deleted
FROM users
WHERE username = $1
`

func (q *Queries) SelectUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, selectUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.EmailConfirmedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
	)
	return i, err
}
